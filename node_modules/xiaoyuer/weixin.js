var userUtil = require('./xiaoyuer/userInfo'),
    fs = require('fs');
var events=require('events');
/*
* 为减少IO，在利用配置文件时使用闭包
*但同时设定一个事件监听器
* 用于监听设置的变化
* 以做到实时更改
 */
var updateFile=new events.EventEmitter();



/*
*设置自动回复
 */
exports.reply_settings = (function(){
    var fileAdd =  __dirname+"/../../shared/reply-setting.json";
    var reply_body = JSON.parse(fs.readFileSync(fileAdd));

    /*
    *增加关键词回复
     */
    function   append_auto_reply(str) {
        reply_body.auto_reply[reply_body.auto_reply.length] = JSON.parse(str);
        return  {
           first: fs.writeFileSync(fileAdd, JSON.stringify(reply_body)),
           second:updateFile.emit("update")
         }
    }
    /*
    *删除一条关键词回复规则
     */
    function  delete_auto_reply(id){
        var temp = [];
        reply_body.auto_reply.forEach(function(value){
            if(value.id != id)
                temp[temp.length] = value;
        })
        reply_body.auto_reply = temp;
        return  {
            first: fs.writeFileSync(fileAdd, JSON.stringify(reply_body)),
            second:updateFile.emit("update")
        };
    }
   /*
   *编辑关键词回复规则
    */
    function edit_auto_reply (str){
        var obj = JSON.parse(str);
        reply_body.auto_reply.forEach(function(value){
            if(value.id = str.id)
                value = str;
        })
        return  {
            first: fs.writeFileSync(fileAdd, JSON.stringify(reply_body)),
            second:updateFile.emit("update")
        }
    }
    /*
    *编辑关注时的回复内容
     */
    function edit_subscribe_reply(str){
        var obj = JSON.parse(str);
        reply_body.subscribe = obj;
        return  {
            first: fs.writeFileSync(fileAdd, JSON.stringify(reply_body)),
            second:updateFile.emit("update")
        }
    }
    return{
        append: append_auto_reply,
        edit_sub: edit_subscribe_reply,
        edit_auto: edit_auto_reply,
        delete: delete_auto_reply,
        get_reply:reply_body.auto_reply,
        get_sub: reply_body.subscribe
    }
})()

/*
*根据设定的内容回复
 */
exports.reply_by_set = function(text){
    var fileAdd =  __dirname+"/../../shared/reply-setting.json";
    var reply_body = JSON.parse(fs.readFileSync(fileAdd));
    updateFile.on("update",function(){
       reply_body = JSON.parse(fs.readFileSync(fileAdd));
        console.log("yes!");
    })
    return function(){
        var result;
        reply_body.auto_reply.forEach(function(value){
            if(value.keyword == text)
               result = {
                   type:value.type,
                   content:value.content
               }
        })
        return result;
    }
}

/*
*关注时的自动回复
 */
exports.reply_sub = function(openid,ticket){
    var fileAdd =  __dirname+"/../../shared/reply-setting.json";
    var reply_body = JSON.parse(fs.readFileSync(fileAdd));
    updateFile.on("update",function(){
        reply_body = JSON.parse(fs.readFileSync(fileAdd));
    })
    return function(){
        userUtil.scanQR(openid,ticket,function(){
            ;
        })
        return reply_body.subscribe;
    }
}

/*
*对菜单click事件的回复
 */
exports.event_reply = function(openid,event_key,callback){
    switch (event_key){
        case "KF":{
            callback({
                type:"transfer_customer_service",
                content:""
            })
        }
        break;
        /*
        *点击后变更实时消息提醒的状态
         */
        case "PUSH":{

        }
            break;
        /*
        *可用余额
         */
        case "LEFT":{
            userUtil.getBalance(openid,function(balance){
                callback(balance)
            })
        }
            break;

    }
 }